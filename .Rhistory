rm(list = ls())
#Loading of the packages: readxl, dplyr, caret, Metrics, lmtest, MASS and sources: comp_function.R, seminr.R
source("comp_function.R")
source("seminr.R")
library(readxl)
library(dplyr)
library(psych)
library(caret)
library(Metrics)
library(lmtest)
library(MASS)
# Read  data set “TPB"
data = read_excel("TPB.xlsx", sheet= 1)
SN = data[,31:32]
data = data[,1:30]
colnames(data)
nrow(data)
colnames(data) = c(multi_items("Attitude", 1:12),
multi_items("PBC", 1:9), multi_items("BI", 1:9)
# ,multi_items("SN", 1:3)
)
data = as.matrix(data)
data[which(data == 0)] = 0.001 ## minimum value set 0.001
becomp = function(i) {return(Closure(as.data.frame(data)[,(3*i-2):(3*i)]))}
data = do.call("cbind", apply(matrix(1:10), 1, becomp))
# First step, the model estimation
do.ilr = function(i) return(ilr(data[,(3*i-2):(3*i)]))
data.ilr = do.call("cbind", lapply(matrix(1:10), do.ilr))
colnames(data.ilr) = c(multi_items("Attitude", 1:8),
multi_items("PBC", 1:6), multi_items("BI", 1:6)
# ,multi_items("SN", 1:2)
)
head(data.ilr)
data.ilr = cbind(data.ilr, SN)
head(data.ilr)
dim(data.ilr)
maxIt <- 300
stopCriterion <- 7
obsData <- data.ilr
mm_model <- constructs(
composite("Attitude", multi_items("Attitude", 1:8),weights = mode_A),
composite("BI", multi_items("BI", 1:6),weights = mode_A),
composite("PBC", multi_items("PBC", 1:6),weights = mode_A),
composite("SNnew", multi_items("SNnew", 1:2),weights = mode_A)
)
sm_model <- relationships(
paths(from = "SNnew", to = "Attitude"),
paths(from = "SNnew", to = "PBC"),
paths(from = "SNnew", to = "BI"),
paths(from = "Attitude", to = "BI"),
paths(from = "PBC", to = "BI")
)
smMatrix <- sm_model
measurement_model <- mm_model
recognized_constructs <- c("composite", "reflective", "higher_order_composite")
construct_measurements <- measurement_model[names(measurement_model) %in% recognized_constructs]
mmMatrix <- matrix(unlist(construct_measurements),
ncol = 3, byrow = TRUE,
dimnames = list(NULL, c("construct", "measurement", "type"))
)
constructs <- construct_names(smMatrix)
mmVariables <- mmMatrix[mmMatrix[,"construct"] %in% constructs, "measurement"]
normData <- standardize_safely(obsData[, mmVariables])
meanData <- attr(normData, "scaled:center")
sdData <- attr(normData, "scaled:scale")
measurement_mode_scheme <- sapply(unique(c(sm_model[,1], sm_model[,2])), get_measure_mode, mmMatrix, USE.NAMES = TRUE)
plsModel = seminr::simplePLS(obsData = normData,
smMatrix = smMatrix,
mmMatrix = mmMatrix,
inner_weights = path_weighting,
maxIt=maxIt,
stopCriterion=stopCriterion,
measurement_mode_scheme = measurement_mode_scheme)
plsModel$data = normData
plsModel$rawdata = obsData
plsModel$measurement_model = mm_model
plsModel$structural_model = sm_model
plsModel$path_coef
source("evaluation.R")
## Calculating the compositional loadings
write.csv(plsModel$outer_loadings,'real_outer_loadings.csv')
dd = read.csv('real_outer_loadings-manual.csv') # manually reorganize the loading results
dd1 = data.frame()
## 每两个对应一个饼
for (i in 1:11){
dd1 = rbind(dd1, ilr_i(matrix(as.numeric(dd[(2*i-1):(2*i),2]), ncol=2)))
}
dd1 ## loadings
#compositional composite reliablity
comp_group = matrix(rep(c(multi_items('Attitude',2:5), multi_items('BI',c(1,2,4)), multi_items('PBC',3:5), 'SNnew'), each = 2))
rownames(comp_group) = rownames(plsModel$outer_loadings)
calculate_CR(plsModel,comp_group = comp_group)
cronbachs_alpha(plsModel)
calculate_CR(plsModel)
#Third step, structural model evaluation
calculate_bootstrap(plsModel, seed = 123)
calculate_R2(plsModel)
calculate_R2(plsModel)
calculate_Q2(plsModel, D = 10)
# Scores
calculate_latent_scores <- function(outer_loadings, data) {
data_matrix <- as.matrix(data)
outer_loadings_matrix <- as.matrix(outer_loadings)
# LV Scores value calculation by using loadings
latent_scores <- data_matrix %*% ginv(t(outer_loadings_matrix))
colnames(latent_scores) <- colnames(outer_loadings)
return(latent_scores)
}
calculate_predicted_endogenous_LV <- function(model, data, endogenous_LV) {
path_coef_matrix <- model$path_coef
outer_loadings <- model$outer_loadings
# LV Scores value calculation by using loadings
latent_scores <- calculate_latent_scores(outer_loadings, data)
colnames(latent_scores) <- colnames(outer_loadings)
# Calculate the predicted values of endogenous LVs.
predicted_scores <- latent_scores %*% path_coef_matrix[, endogenous_LV, drop = FALSE]
return(predicted_scores)
}
calculate_predicted_MV <- function(model, data, endogenous_LV) {
measurement_name <- model$mmMatrix[model$mmMatrix[,"construct"] == endogenous_LV,"measurement"]
latent_scores <- calculate_latent_scores(model$outer_loadings, data)
# Calculate the predicted values of MVs using loading values.
predicted_MV <- matrix(0, nrow(latent_scores), length(measurement_name), dimnames = list(NULL, measurement_name))
for (i in 1:nrow(latent_scores)) {
predicted_MV[i,] <- latent_scores[i, endogenous_LV] * model$outer_loadings[measurement_name, endogenous_LV]
}
return(predicted_MV)
}
measurement_name <- plsModel$mmMatrix[plsModel$mmMatrix[,"construct"] == "BI","measurement"]
# 10-fold cross-validation.
folds <- createFolds(1:nrow(normData), k = 10)
RMSE_pls_LV <- numeric(length(folds))
MAE_pls_LV <- numeric(length(folds))
RMSE_lm1_LV <- numeric(length(folds))
MAE_lm1_LV <- numeric(length(folds))
RMSE_lm2_LV <- numeric(length(folds))
MAE_lm2_LV <- numeric(length(folds))
RMSE_pls_MV <- matrix(0, length(folds), 6, dimnames = list(NULL, measurement_name))
MAE_pls_MV <- matrix(0, length(folds), 6, dimnames = list(NULL, measurement_name))
RMSE_lm_MV <- matrix(0, length(folds), 6, dimnames = list(NULL, measurement_name))
MAE_lm_MV <- matrix(0, length(folds), 6, dimnames = list(NULL, measurement_name))
normData <- standardize_safely(obsData[, mmVariables])
meanData <- attr(normData, "scaled:center")
sdData <- attr(normData, "scaled:scale")
for(i in seq_along(folds)){
test_indices <- folds[[i]]
train_indices <- setdiff(1:nrow(normData), test_indices)
train_data <- plsModel$rawdata[train_indices, ]
test_data <- plsModel$rawdata[test_indices, ]
plsModel_train = seminr::simplePLS(obsData = train_data,
smMatrix = smMatrix,
mmMatrix = mmMatrix,
inner_weights = path_weighting,
maxIt=maxIt,
stopCriterion=stopCriterion,
measurement_mode_scheme = measurement_mode_scheme)
estimated_test_eta <- calculate_predicted_endogenous_LV(plsModel_train, test_data, "BI")
real_test_eta <- calculate_latent_scores(plsModel_train$outer_loadings, test_data)[, "BI"]
RMSE_pls_LV[i] <- rmse(real_test_eta, estimated_test_eta)
MAE_pls_LV[i] <- mae(real_test_eta, estimated_test_eta)
train_latent_scores <- calculate_latent_scores(plsModel_train$outer_loadings, train_data)
lm1 <- lm(BI ~ SNnew + Attitude + PBC, data = as.data.frame(train_latent_scores))
test_latent_scores <- calculate_latent_scores(plsModel_train$outer_loadings, test_data)
predicted_test_eta_lm1 <- predict(lm1, newdata = as.data.frame(test_latent_scores))
RMSE_lm1_LV[i] <- rmse(test_latent_scores[, 'BI'], predicted_test_eta_lm1)
MAE_lm1_LV[i] <- mae(test_latent_scores[, 'BI'], predicted_test_eta_lm1)
train_data_BI <- cbind(train_data, train_latent_scores[, 'BI'])
colnames(train_data_BI) = c(colnames(train_data), 'BI')
test_data_BI <- cbind(test_data, test_latent_scores[, 'BI'])
colnames(test_data_BI) = c(colnames(test_data), 'BI')
lm2_formula <- as.formula(paste("BI ~ ", paste(colnames(normData)[-(9:14)], collapse = ' + ')))
lm2 <- lm(lm2_formula, data = train_data_BI)
predicted_test_eta_lm2 <- predict(lm2, newdata = test_data)
real_test_eta <- calculate_latent_scores(plsModel_train$outer_loadings, test_data)[, "BI"]
RMSE_lm2_LV[i] <- rmse(real_test_eta, predicted_test_eta_lm2)
MAE_lm2_LV[i] <- mae(real_test_eta, predicted_test_eta_lm2)
estimated_MV <- calculate_predicted_MV(plsModel_train, test_data, "BI")
actual_MV <- test_data[, measurement_name]
for (l in measurement_name) {
RMSE_pls_MV[i, l] = rmse(actual_MV[,l], estimated_MV[,l])
MAE_pls_MV[i, l] = mae(actual_MV[,l], estimated_MV[,l])
}
train_data_X = train_data[, !(colnames(train_data) %in% measurement_name)]
test_data_X = test_data[, !(colnames(test_data) %in% measurement_name)]
for(l in measurement_name){
train_data_l = cbind(train_data_X, l=train_data[,l])
test_data_l = cbind(test_data_X, l=test_data[,l])
trainLM <- lm(l ~ ., train_data_l)
predicted_col <- predict(trainLM, newdata = test_data_l)
actual_col <- test_data[, l]
RMSE_lm_MV[i, l] = rmse(actual_col, predicted_col)
MAE_lm_MV[i, l] = mae(actual_col, predicted_col)
}
}
## predictions on MV
mat_MV = rbind(apply(RMSE_pls_MV, 2, mean),
apply(RMSE_lm_MV, 2, mean),
apply(MAE_pls_MV, 2, mean),
apply(MAE_lm_MV, 2, mean))
mat_MV_final = matrix(NA, nrow=4, ncol=3)
for (i in 1:2){## geometric mean of RMSE for the ilr-transformed predicted MVs
for (j in 1:3){
mat_MV_final[i, j] = 0.5*sqrt(mat_MV[i, 2*j-1]^2 + mat_MV[i, 2*j]^2)
}
}
for (i in 3:4){##  mean of MAE for the ilr-transformed predicted MVs
for (j in 1:3){
mat_MV_final[i, j] = 0.5*(mat_MV[i, 2*j-1] + mat_MV[i, 2*j])
}
}
rownames(mat_MV_final) = c('RMSE_PLS_MV', 'RMSE_LM_MV','MAE_PLS_MV','MAE_LM_MV')
colnames(mat_MV_final) = c('BI1', 'BI2','BI3')
round(mat_MV_final,3)
## predictions on LV
mat_LV = cbind(apply(rbind(RMSE_pls_LV, RMSE_lm1_LV, RMSE_lm2_LV), 1, mean),
apply(rbind(MAE_pls_LV, MAE_lm1_LV, MAE_lm2_LV), 1, mean))
colnames(mat_LV) = c('RMSE_LV','MAE_LV')
rownames(mat_LV) = c('PLS','LM1','LM2')
round(mat_LV,3) ## predictions on LVs
round(mat_MV_final,3)
## predictions on MV
mat_MV = rbind(apply(RMSE_pls_MV, 2, mean),
apply(RMSE_lm_MV, 2, mean),
apply(MAE_pls_MV, 2, mean),
apply(MAE_lm_MV, 2, mean))
mat_MV_final = matrix(NA, nrow=4, ncol=1)
for (i in 1:2){## geometric mean of RMSE for the ilr-transformed predicted MVs
mat_MV_final[i, 1] = exp(mean(log(mat_MV[i,])))
}
for (i in 3:4){##  mean of MAE for the ilr-transformed predicted MVs
mat_MV_final[i, 1] = mean(mat_MV[i,] )
}
rownames(mat_MV_final) = c('RMSE_PLS_MV', 'RMSE_LM_MV','MAE_PLS_MV','MAE_LM_MV')
colnames(mat_MV_final) = c('BI')
round(mat_MV_final,3)
## predictions on LV
mat_LV = cbind(apply(rbind(RMSE_pls_LV, RMSE_lm1_LV, RMSE_lm2_LV), 1, mean),
apply(rbind(MAE_pls_LV, MAE_lm1_LV, MAE_lm2_LV), 1, mean))
colnames(mat_LV) = c('RMSE_LV','MAE_LV')
rownames(mat_LV) = c('PLS','LM1','LM2')
round(mat_LV,3) ## predictions on LVs
calculate_CR(plsModel,comp_group = comp_group)
## Calculating the compositional loadings
write.csv(plsModel$outer_loadings,'real_outer_loadings.csv')
cronbachs_alpha(plsModel)
calculate_CR(plsModel)
